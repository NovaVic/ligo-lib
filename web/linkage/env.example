#used in docker compose/ as well as openshift kubernetes env
LINK_DB_USER=postgres
LINK_DB_HOST=postgres2
LINK_DB_PORT=5432
LINK_DB_SERVICE=postgres

#if it is alpine linux based postgres then there is no password
#for other linux image based postgres we would need non empty
#password

LINK_DB_PASSWORD=

#equivalent setting for openshift as for example
#LINK_DB_HOST=http://postgresql2-linking-project-dev-2-1-0.10.0.75.2.xip.io
#LINK_DB_PASSWORD=postgres
#LINK_DB_SERVICE=postgresql2

IN_DOCKER=1
C_FORCE_ROOT=true
CELERY_BROKER_URL=redis://redis:6379/0

# General settings
DJANGO_ADMIN_URL=
DJANGO_SETTINGS_MODULE=config.settings.local
# another possibility is
#DJANGO_SETTINGS_MODULE=config.settings.production
DJANGO_SECRET_KEY=e(q8huau(-+qz6oi9!k62#_+t61n(*7daz7vmv2439ns1+2=g^
DJANGO_ALLOWED_HOSTS=.localhost
#

# Used with email
DJANGO_MAILGUN_API_KEY=
DJANGO_SERVER_EMAIL=
MAILGUN_SENDER_DOMAIN=

#For storing emails in text files

DJANGO_EMAIL_BACKEND = django.core.mail.backends.filebased.EmailBackend

#For storing emails in text files ... the text files would be saved
#under the following directory
DJANGO_EMAIL_FILE_PATH=/tmp/django-email-dev


#Instead of saving in file if you want to showing email on console then comment
#out previous two configuration lines and uncomment the following config
#setting

#DJANGO_EMAIL_BACKEND = django.core.mail.backends.console.EmailBackend'


# Security! Better to use DNS for this task, but you can use redirect
DJANGO_SECURE_SSL_REDIRECT=False

# django-allauth
DJANGO_ACCOUNT_ALLOW_REGISTRATION=True
# Sentry
DJANGO_SENTRY_DSN=


# AWS Settings
DJANGO_AWS_ACCESS_KEY_ID=
DJANGO_AWS_SECRET_ACCESS_KEY=
DJANGO_AWS_STORAGE_BUCKET_NAME=

# Used with email
DJANGO_MAILGUN_API_KEY=
DJANGO_SERVER_EMAIL=
MAILGUN_SENDER_DOMAIN=

# Security! Better to use DNS for this task, but you can use redirect
DJANGO_SECURE_SSL_REDIRECT=False

# django-allauth
DJANGO_ACCOUNT_ALLOW_REGISTRATION=True
# Sentry
DJANGO_SENTRY_DSN=
